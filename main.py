import logging
from telegram import Update, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler
)
import asyncio
import telegram.error

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = '7754710395:AAGQbOYfDHpdNEEHlFUCQZy806aVKIPSHGY'
CHANNEL_ID = '@market_nft_prm'
MODERATOR_CHAT_ID = -1002853155981  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å –ø–æ–º–æ—â—å—é /get_chat_id
SUPER_ADMINS = {541867942, 7774253158}
MODERATORS = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    SELECT_ACTION,
    ADD_MODERATOR,
    REMOVE_MODERATOR,
    REJECT_REASON,
    WAITING_FOR_SUGGESTION
) = range(5)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

suggestions = {}
waiting_for_suggestion = {}
media_group_suggestions = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª—å–±–æ–º–æ–≤ –ø–æ media_group_id
pending_media_groups = {}  # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞

def is_super_admin(user_id: int) -> bool:
    return user_id in SUPER_ADMINS

def is_moderator(user_id: int) -> bool:
    return is_super_admin(user_id) or user_id in MODERATORS

async def retry_async(func, *args, retries=3, delay=1, **kwargs):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö."""
    for attempt in range(retries):
        try:
            return await func(*args, **kwargs)
        except telegram.error.TimedOut as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < retries - 1:
                await asyncio.sleep(delay)
            else:
                raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ retry_async: {e}")
            raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user

    if is_super_admin(user.id):
        MODERATORS[user.id] = user.username or f"User_{user.id}"

    keyboard = [
        [InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å", callback_data='suggest')]
    ]

    if is_moderator(user.id):
        keyboard.append([InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data='manage_mods')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if update.callback_query:
            await retry_async(
                update.callback_query.edit_message_text,
                text=f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü—Ä–∏–≤–µ—Ç, {user.first_name}!',
                reply_markup=reply_markup
            )
        else:
            await retry_async(
                update.message.reply_text,
                text=f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü—Ä–∏–≤–µ—Ç, {user.first_name}!',
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await retry_async(
            update.effective_chat.send_message,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
    return ConversationHandler.END

async def check_bot_rights(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤."""
    try:
        bot_member = await retry_async(
            context.bot.get_chat_member,
            chat_id=MODERATOR_CHAT_ID,
            user_id=context.bot.id
        )
        if bot_member.status != 'administrator':
            raise ValueError("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        rights = {
            'status': bot_member.status,
            'can_post_messages': getattr(bot_member, 'can_post_messages', False),
            'can_delete_messages': getattr(bot_member, 'can_delete_messages', False)
        }
        await retry_async(
            update.message.reply_text,
            text=f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {MODERATOR_CHAT_ID}:\n"
                 f"–°—Ç–∞—Ç—É—Å: {rights['status']}\n"
                 f"–ú–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {rights['can_post_messages']}\n"
                 f"–ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {rights['can_delete_messages']}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}")
        await retry_async(
            update.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {MODERATOR_CHAT_ID} –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
        )

async def check_webhook(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ webhook."""
    try:
        webhook_info = await retry_async(context.bot.get_webhook_info)
        await retry_async(
            update.message.reply_text,
            text=f"Webhook info: {webhook_info}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {e}")
        await retry_async(
            update.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {e}"
        )

async def delete_webhook(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è webhook –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ polling."""
    try:
        await retry_async(
            context.bot.delete_webhook,
            drop_pending_updates=True
        )
        await retry_async(
            update.message.reply_text,
            text="Webhook —É–¥–∞–ª–µ–Ω. –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        await retry_async(
            update.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}"
        )

async def request_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ request_suggestion: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    user_id = query.from_user.id
    waiting_for_suggestion[user_id] = True

    try:
        await retry_async(
            query.edit_message_text,
            text="üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_suggestion')]
            ])
        )
        return WAITING_FOR_SUGGESTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ request_suggestion: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

async def handle_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user

    if user.id not in waiting_for_suggestion:
        await retry_async(
            update.message.reply_text,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        return ConversationHandler.END

    message = update.message
    media_group_id = message.media_group_id

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
    if media_group_id:
        if media_group_id not in pending_media_groups:
            pending_media_groups[media_group_id] = {
                'photos': [],
                'caption': message.caption,
                'timestamp': asyncio.get_event_loop().time()
            }
        if message.photo:
            pending_media_groups[media_group_id]['photos'].append(message.photo[-1])
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ –≤ –∞–ª—å–±–æ–º media_group_id: {media_group_id}, File ID: {message.photo[-1].file_id}")

        # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞
        if asyncio.get_event_loop().time() - pending_media_groups[media_group_id]['timestamp'] < 1:
            return WAITING_FOR_SUGGESTION

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º
        suggestion_id = str(media_group_id)
        photo_group = list({photo.file_id: photo for photo in pending_media_groups[media_group_id]['photos']}.values())
        caption = pending_media_groups[media_group_id]['caption']
        del pending_media_groups[media_group_id]
    else:
        suggestion_id = str(message.message_id)
        photo_group = [message.photo[-1]] if message.photo else []
        caption = message.caption if message.caption else message.text if message.text else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

    if media_group_id and suggestion_id in media_group_suggestions:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–ª—å–±–æ–º–∞ media_group_id: {media_group_id}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
        return WAITING_FOR_SUGGESTION

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {len(photo_group)}, Media group ID: {media_group_id}, File IDs: {[photo.file_id for photo in photo_group]}")

    suggestions[suggestion_id] = {
        'original_message': message,
        'user_id': user.id,
        'username': user.username or f"User_{user.id}",
        'name': user.full_name,
        'moderation_message_id': None,
        'photo_group': photo_group,
        'document': message.document if message.document else None,
        'moderation_messages': [],
        'buttons_message_id': None,
        'reject_request_message_id': None,
        'media_group_id': media_group_id
    }

    if media_group_id:
        media_group_suggestions[media_group_id] = suggestion_id

    text = f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (ID: {suggestion_id}):\n\n{caption or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–û—Ç: {user.full_name} (@{user.username or 'NoUsername'})"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    try:
        bot_member = await retry_async(
            context.bot.get_chat_member,
            chat_id=MODERATOR_CHAT_ID,
            user_id=context.bot.id
        )
        if bot_member.status != 'administrator':
            logger.error(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ {MODERATOR_CHAT_ID}")
            await retry_async(
                update.message.reply_text,
                text="‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–Ω–∞—á—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            if suggestion_id in suggestions:
                del suggestions[suggestion_id]
            if media_group_id and media_group_id in media_group_suggestions:
                del media_group_suggestions[media_group_id]
            return ConversationHandler.END
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: status={bot_member.status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {MODERATOR_CHAT_ID}: {e}")
        await retry_async(
            update.message.reply_text,
            text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id} –≤ —á–∞—Ç {MODERATOR_CHAT_ID}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f'approve_{suggestion_id}')],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'reject_{suggestion_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    sent_messages = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å media_group_id –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
        if media_group_id and photo_group:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª—å–±–æ–º–∞ —Å media_group_id {suggestion_id}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {len(photo_group)}")
            media_group = []
            unique_file_ids = set()
            for idx, photo in enumerate(photo_group[:10]):  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 10 —Ñ–æ—Ç–æ
                if photo.file_id not in unique_file_ids:
                    media_group.append(InputMediaPhoto(
                        media=photo.file_id,
                        caption=text if idx == 0 else None
                    ))
                    unique_file_ids.add(photo.file_id)

            if not media_group:
                logger.error(f"–ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –∞–ª—å–±–æ–º–∞ {suggestion_id}")
                await retry_async(
                    update.message.reply_text,
                    text="‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –∞–ª—å–±–æ–º–µ."
                )
                if suggestion_id in suggestions:
                    del suggestions[suggestion_id]
                if media_group_id and media_group_id in media_group_suggestions:
                    del media_group_suggestions[media_group_id]
                return ConversationHandler.END

            sent_messages = await retry_async(
                context.bot.send_media_group,
                chat_id=MODERATOR_CHAT_ID,
                media=media_group
            )
            suggestions[suggestion_id]['moderation_messages'] = [m.message_id for m in sent_messages]
            suggestions[suggestion_id]['moderation_message_id'] = sent_messages[0].message_id

            logger.info(f"–ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. Message IDs: {suggestions[suggestion_id]['moderation_messages']}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            sent_msg = await retry_async(
                context.bot.send_message,
                chat_id=MODERATOR_CHAT_ID,
                text=f"–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (ID: {suggestion_id}):",
                reply_to_message_id=sent_messages[0].message_id,
                reply_markup=reply_markup
            )
            suggestions[suggestion_id]['buttons_message_id'] = sent_msg.message_id
            suggestions[suggestion_id]['moderation_messages'].append(sent_msg.message_id)

        # –ï—Å–ª–∏ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
        elif photo_group:
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ")
            sent_msg = await retry_async(
                context.bot.send_photo,
                chat_id=MODERATOR_CHAT_ID,
                photo=photo_group[-1].file_id,
                caption=text,
                reply_markup=reply_markup
            )
            suggestions[suggestion_id]['moderation_message_id'] = sent_msg.message_id
            suggestions[suggestion_id]['moderation_messages'] = [sent_msg.message_id]
            suggestions[suggestion_id]['buttons_message_id'] = sent_msg.message_id

            logger.info(f"–û–¥–Ω–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. Message ID: {sent_msg.message_id}")

        # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        elif suggestions[suggestion_id].get('document'):
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            sent_msg = await retry_async(
                context.bot.send_document,
                chat_id=MODERATOR_CHAT_ID,
                document=suggestions[suggestion_id]['document'].file_id,
                caption=text,
                reply_markup=reply_markup
            )
            suggestions[suggestion_id]['moderation_message_id'] = sent_msg.message_id
            suggestions[suggestion_id]['moderation_messages'] = [sent_msg.message_id]
            suggestions[suggestion_id]['buttons_message_id'] = sent_msg.message_id

            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. Message ID: {sent_msg.message_id}")

        # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        else:
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞")
            sent_msg = await retry_async(
                context.bot.send_message,
                chat_id=MODERATOR_CHAT_ID,
                text=text,
                reply_markup=reply_markup
            )
            suggestions[suggestion_id]['moderation_message_id'] = sent_msg.message_id
            suggestions[suggestion_id]['moderation_messages'] = [sent_msg.message_id]
            suggestions[suggestion_id]['buttons_message_id'] = sent_msg.message_id

            logger.info(f"–¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. Message ID: {sent_msg.message_id}")

        logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. Moderation messages: {suggestions[suggestion_id]['moderation_messages']}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.id in waiting_for_suggestion:
            del waiting_for_suggestion[user.id]

        await retry_async(
            update.message.reply_text,
            text='‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ])
        )
        return WAITING_FOR_SUGGESTION

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id} –≤ —á–∞—Ç {MODERATOR_CHAT_ID}: {e}")
        await retry_async(
            update.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {e}."
        )
        if suggestion_id in suggestions:
            if suggestions[suggestion_id].get('media_group_id') in media_group_suggestions:
                del media_group_suggestions[suggestions[suggestion_id]['media_group_id']]
            del suggestions[suggestion_id]
        return ConversationHandler.END

async def cancel_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ cancel_suggestion: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    user_id = query.from_user.id
    if user_id in waiting_for_suggestion:
        del waiting_for_suggestion[user_id]

    try:
        await retry_async(
            query.edit_message_text,
            text="‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ])
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_suggestion: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user

    keyboard = [
        [InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å", callback_data='suggest')]
    ]

    if is_moderator(user.id):
        keyboard.append([InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data='manage_mods')])

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if hasattr(update, 'message') and update.message:
            await retry_async(
                update.message.reply_text,
                text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
                reply_markup=reply_markup
            )
        else:
            await retry_async(
                update.callback_query.edit_message_text,
                text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")
        await retry_async(
            update.effective_chat.send_message,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )

async def manage_moderators(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ manage_moderators: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    user = query.from_user

    if not is_super_admin(user.id):
        await retry_async(
            query.message.reply_text,
            text="‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏!"
        )
        return await start(update, context)

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data='add_mod')],
        [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data='remove_mod')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data='list_mods')],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await retry_async(
            query.edit_message_text,
            text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:",
            reply_markup=reply_markup
        )
        return SELECT_ACTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_moderators: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

async def list_moderators(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ list_moderators: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    mods_list = "\n".join(
        [f"@{username} (ID: {user_id})" for user_id, username in MODERATORS.items()]) or "–ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"

    keyboard = [
        [InlineKeyboardButton("üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data='manage_mods')],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await retry_async(
            query.edit_message_text,
            text=f"üìã –¢–µ–∫—É—â–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:\n\n{mods_list}",
            reply_markup=reply_markup
        )
        return SELECT_ACTION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_moderators: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

async def add_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ add_moderator: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data='manage_mods')],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await retry_async(
            query.edit_message_text,
            text="–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=reply_markup
        )
        return ADD_MODERATOR
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_moderator: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

async def handle_add_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_id = int(update.message.text.strip())
    except ValueError:
        await retry_async(
            update.message.reply_text,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID."
        )
        return ADD_MODERATOR

    if user_id in MODERATORS:
        await retry_async(
            update.message.reply_text,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!"
        )
    elif user_id in SUPER_ADMINS:
        await retry_async(
            update.message.reply_text,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} - —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –∏ —Ç–∞–∫ –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞!"
        )
    else:
        try:
            user = await retry_async(
                context.bot.get_chat,
                chat_id=user_id
            )
            MODERATORS[user_id] = user.username or f"User_{user_id}"
            await retry_async(
                update.message.reply_text,
                text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or 'NoUsername'} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã!"
            )
            await retry_async(
                context.bot.send_message,
                chat_id=user_id,
                text="üéâ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
            )
        except Exception as e:
            await retry_async(
                update.message.reply_text,
                text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {e}"
            )

    return await manage_moderators(update, context)

async def remove_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ remove_moderator: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    if not MODERATORS:
        await retry_async(
            query.edit_message_text,
            text="–ù–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!"
        )
        return await manage_moderators(update, context)

    keyboard = [
        [InlineKeyboardButton(f"@{username} (ID: {user_id})", callback_data=f'remove_{user_id}')]
        for user_id, username in MODERATORS.items() if not is_super_admin(user_id)
    ]
    keyboard += [
        [InlineKeyboardButton("üîô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data='manage_mods')],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await retry_async(
            query.edit_message_text,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return REMOVE_MODERATOR
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_moderator: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

async def handle_remove_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ handle_remove_moderator: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    try:
        _, user_id = query.data.split('_')
        user_id = int(user_id)
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
        await retry_async(
            query.message.reply_text,
            text="‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
        )
        return ConversationHandler.END

    if user_id in MODERATORS and not is_super_admin(user_id):
        username = MODERATORS[user_id]
        del MODERATORS[user_id]
        await retry_async(
            query.edit_message_text,
            text=f"‚úÖ @{username} (ID: {user_id}) –±–æ–ª—å—à–µ –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!"
        )
        try:
            await retry_async(
                context.bot.send_message,
                chat_id=user_id,
                text="‚ÑπÔ∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –±—ã–≤—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
    else:
        await retry_async(
            query.edit_message_text,
            text="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞!"
        )

    return await manage_moderators(update, context)

async def request_reject_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ request_reject_reason: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    try:
        _, suggestion_id = query.data.split('_')
        suggestion_id = str(suggestion_id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
        await retry_async(
            query.message.reply_text,
            text="‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
        )
        return ConversationHandler.END

    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id}. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ suggestions: {list(suggestions.keys())}")

    if suggestion_id not in suggestions:
        await retry_async(
            query.message.reply_text,
            text="‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.",
            reply_to_message_id=query.message.message_id
        )
        if suggestion_id in suggestions and suggestions[suggestion_id].get('buttons_message_id'):
            try:
                await retry_async(
                    context.bot.delete_message,
                    chat_id=MODERATOR_CHAT_ID,
                    message_id=suggestions[suggestion_id]['buttons_message_id']
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ {suggestions[suggestion_id]['buttons_message_id']}: {e}")
        return ConversationHandler.END

    if not is_moderator(query.from_user.id):
        await retry_async(
            query.message.reply_text,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!"
        )
        return ConversationHandler.END

    context.user_data['rejecting'] = {
        'suggestion_id': suggestion_id,
        'moderator_id': query.from_user.id,
        'moderation_msg_id': query.message.message_id
    }

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_reject')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        sent_msg = await retry_async(
            query.message.reply_text,
            text=f"üìù –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–∫–∞–∑–∞–≤ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (ID: {suggestion_id}):",
            reply_to_message_id=query.message.message_id,
            reply_markup=reply_markup
        )
        suggestions[suggestion_id]['reject_request_message_id'] = sent_msg.message_id
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ID: {sent_msg.message_id}, Suggestion ID: {suggestion_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id}: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"üìù –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–∫–∞–∑–∞–≤ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (ID: {suggestion_id}):",
            reply_to_message_id=query.message.message_id,
            reply_markup=reply_markup
        )

    return REJECT_REASON

async def handle_reject_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not update.message.reply_to_message:
        await retry_async(
            update.message.reply_text,
            text=f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (ID: {context.user_data.get('rejecting', {}).get('suggestion_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})."
        )
        return REJECT_REASON

    if not update.message.text:
        await retry_async(
            update.message.reply_text,
            text="‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."
        )
        return REJECT_REASON

    reason = update.message.text.strip()
    reply_msg_id = update.message.reply_to_message.message_id

    suggestion_id = context.user_data.get('rejecting', {}).get('suggestion_id')
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è. Reply_msg_id: {reply_msg_id}, Suggestion_id: {suggestion_id}, Suggestions: {list(suggestions.keys())}")

    if not suggestion_id or suggestion_id not in suggestions:
        await retry_async(
            update.message.reply_text,
            text=f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (ID: {suggestion_id})."
        )
        if 'rejecting' in context.user_data:
            del context.user_data['rejecting']
        return ConversationHandler.END

    suggestion = suggestions[suggestion_id]
    if reply_msg_id != suggestion.get('reject_request_message_id'):
        await retry_async(
            update.message.reply_text,
            text=f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (ID: {suggestion_id})."
        )
        logger.error(f"Reply_msg_id {reply_msg_id} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç reject_request_message_id {suggestion.get('reject_request_message_id')}")
        return REJECT_REASON

    user_id = suggestion['user_id']
    suggestion_text = suggestion['original_message'].text or suggestion['original_message'].caption or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞"

    try:
        await retry_async(
            context.bot.send_message,
            chat_id=user_id,
            text=f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (ID: {suggestion_id}) –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode='HTML'
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        for msg_id in suggestion.get('moderation_messages', []):
            try:
                await retry_async(
                    context.bot.delete_message,
                    chat_id=MODERATOR_CHAT_ID,
                    message_id=msg_id
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É
        if suggestion.get('reject_request_message_id'):
            try:
                await retry_async(
                    context.bot.delete_message,
                    chat_id=MODERATOR_CHAT_ID,
                    message_id=suggestion['reject_request_message_id']
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—á–∏–Ω—ã {suggestion['reject_request_message_id']}: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
        try:
            await retry_async(update.message.delete)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π: {e}")

        await retry_async(
            context.bot.send_message,
            chat_id=MODERATOR_CHAT_ID,
            text=f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (ID: {suggestion_id}) –æ—Ç @{suggestion['username']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º @{update.effective_user.username or 'NoUsername'}.\n\n<b>–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b> {suggestion_text}\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}",
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id}: {e}")
        await retry_async(
            context.bot.send_message,
            chat_id=MODERATOR_CHAT_ID,
            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (ID: {suggestion_id}): {e}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ])
        )
    finally:
        if suggestion_id in suggestions:
            if suggestions[suggestion_id].get('media_group_id') in media_group_suggestions:
                del media_group_suggestions[suggestions[suggestion_id]['media_group_id']]
            del suggestions[suggestion_id]
        if 'rejecting' in context.user_data:
            del context.user_data['rejecting']

    return ConversationHandler.END

async def cancel_reject(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ cancel_reject: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    if 'rejecting' in context.user_data:
        suggestion_id = context.user_data['rejecting'].get('suggestion_id')
        if suggestion_id in suggestions and suggestions[suggestion_id].get('reject_request_message_id'):
            try:
                await retry_async(
                    context.bot.delete_message,
                    chat_id=MODERATOR_CHAT_ID,
                    message_id=suggestions[suggestion_id]['reject_request_message_id']
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—á–∏–Ω—ã: {e}")
        del context.user_data['rejecting']

    try:
        await retry_async(
            query.message.reply_text,
            text="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
            reply_to_message_id=query.message.message_id
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_reject: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

async def approve_suggestion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ approve_suggestion: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    try:
        _, suggestion_id = query.data.split('_')
        suggestion_id = str(suggestion_id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    except ValueError:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
        await retry_async(
            query.message.reply_text,
            text="‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
        )
        return ConversationHandler.END

    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–¥–æ–±—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {suggestion_id}. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ suggestions: {list(suggestions.keys())}")

    if suggestion_id not in suggestions:
        await retry_async(
            query.message.reply_text,
            text="‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.",
            reply_to_message_id=query.message.message_id
        )
        if suggestion_id in suggestions and suggestions[suggestion_id].get('buttons_message_id'):
            try:
                await retry_async(
                    context.bot.delete_message,
                    chat_id=MODERATOR_CHAT_ID,
                    message_id=suggestions[suggestion_id]['buttons_message_id']
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ {suggestions[suggestion_id]['buttons_message_id']}: {e}")
        return ConversationHandler.END

    if not is_moderator(query.from_user.id):
        await retry_async(
            query.message.reply_text,
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!"
        )
        return ConversationHandler.END

    suggestion = suggestions[suggestion_id]
    message = suggestion['original_message']

    try:
        if suggestion.get('media_group_id') and len(set(photo.file_id for photo in suggestion.get('photo_group', []))) > 1:
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∞–ª—å–±–æ–º–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {len(suggestion['photo_group'])}")
            media_group = []
            unique_file_ids = set()
            for idx, photo in enumerate(suggestion['photo_group'][:10]):
                if photo.file_id not in unique_file_ids:
                    media_group.append(InputMediaPhoto(
                        media=photo.file_id,
                        caption=message.caption if idx == 0 and message.caption else None
                    ))
                    unique_file_ids.add(photo.file_id)

            sent_messages = await retry_async(
                context.bot.send_media_group,
                chat_id=CHANNEL_ID,
                media=media_group
            )
            message_link = f"https://t.me/{CHANNEL_ID.replace('@', '')}/{sent_messages[0].message_id}"

        elif suggestion.get('photo_group'):
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id}")
            sent_message = await retry_async(
                context.bot.send_photo,
                chat_id=CHANNEL_ID,
                photo=suggestion['photo_group'][-1].file_id,
                caption=message.caption if message.caption else None
            )
            message_link = f"https://t.me/{CHANNEL_ID.replace('@', '')}/{sent_message.message_id}"

        elif suggestion.get('document'):
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id}")
            sent_message = await retry_async(
                context.bot.send_document,
                chat_id=CHANNEL_ID,
                document=suggestion['document'].file_id,
                caption=message.caption if message.caption else None
            )
            message_link = f"https://t.me/{CHANNEL_ID.replace('@', '')}/{sent_message.message_id}"

        else:
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id}")
            sent_message = await retry_async(
                context.bot.send_message,
                chat_id=CHANNEL_ID,
                text=message.text
            )
            message_link = f"https://t.me/{CHANNEL_ID.replace('@', '')}/{sent_message.message_id}"

        try:
            await retry_async(
                context.bot.send_message,
                chat_id=suggestion['user_id'],
                text=f"üéâ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (ID: {suggestion_id}) –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!\n\n–°—Å—ã–ª–∫–∞: {message_link}",
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        for msg_id in suggestion.get('moderation_messages', []):
            try:
                await retry_async(
                    context.bot.delete_message,
                    chat_id=MODERATOR_CHAT_ID,
                    message_id=msg_id
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

        await retry_async(
            query.message.reply_text,
            text=f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (ID: {suggestion_id}) –æ—Ç @{suggestion['username']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!\n\n<b>–°—Å—ã–ª–∫–∞:</b> {message_link}",
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_to_message_id=query.message.message_id,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ])
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if suggestion.get('buttons_message_id'):
            try:
                await retry_async(
                    context.bot.delete_message,
                    chat_id=MODERATOR_CHAT_ID,
                    message_id=suggestion['buttons_message_id']
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ {suggestion['buttons_message_id']}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {suggestion_id}: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (ID: {suggestion_id}): {e}",
            reply_to_message_id=query.message.message_id,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ])
        )
    finally:
        if suggestion_id in suggestions:
            if suggestions[suggestion_id].get('media_group_id') in media_group_suggestions:
                del media_group_suggestions[suggestions[suggestion_id]['media_group_id']]
            del suggestions[suggestion_id]

    return ConversationHandler.END

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await retry_async(
            update.message.reply_text,
            text=f"Chat ID: {update.effective_chat.id}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_chat_id: {e}")
        await retry_async(
            update.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback –≤ button_callback: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {query.data}")

    try:
        if query.data == 'suggest':
            return await request_suggestion(update, context)
        elif query.data == 'manage_mods':
            return await manage_moderators(update, context)
        elif query.data == 'list_mods':
            return await list_moderators(update, context)
        elif query.data == 'add_mod':
            return await add_moderator(update, context)
        elif query.data == 'remove_mod':
            return await remove_moderator(update, context)
        elif query.data.startswith('remove_'):
            return await handle_remove_moderator(update, context)
        elif query.data.startswith('approve_'):
            return await approve_suggestion(update, context)
        elif query.data.startswith('reject_'):
            return await request_reject_reason(update, context)
        elif query.data in ['cancel_reject', 'cancel_suggestion']:
            return await cancel_reject(update, context) if query.data == 'cancel_reject' else await cancel_suggestion(
                update, context)
        elif query.data in ['back_to_main', 'main_menu']:
            return await start(update, context)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {query.data}")
            await retry_async(
                query.message.reply_text,
                text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
            )
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_callback –¥–ª—è callback_data {query.data}: {e}")
        await retry_async(
            query.message.reply_text,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        return ConversationHandler.END

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(button_callback)
        ],
        states={
            SELECT_ACTION: [
                CallbackQueryHandler(manage_moderators, pattern='^manage_mods$'),
                CallbackQueryHandler(list_moderators, pattern='^list_mods$'),
                CallbackQueryHandler(add_moderator, pattern='^add_mod$'),
                CallbackQueryHandler(remove_moderator, pattern='^remove_mod$'),
                CallbackQueryHandler(handle_remove_moderator, pattern='^remove_\d+$'),
                CallbackQueryHandler(start, pattern='^(back_to_main|main_menu)$')
            ],
            ADD_MODERATOR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_moderator),
                CallbackQueryHandler(manage_moderators, pattern='^manage_mods$'),
                CallbackQueryHandler(start, pattern='^main_menu$')
            ],
            REMOVE_MODERATOR: [
                CallbackQueryHandler(handle_remove_moderator, pattern='^remove_\d+$'),
                CallbackQueryHandler(manage_moderators, pattern='^manage_mods$'),
                CallbackQueryHandler(start, pattern='^main_menu$')
            ],
            REJECT_REASON: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reject_reason),
                CallbackQueryHandler(cancel_reject, pattern='^cancel_reject$')
            ],
            WAITING_FOR_SUGGESTION: [
                MessageHandler(filters.TEXT | filters.PHOTO | filters.ATTACHMENT, handle_suggestion),
                CallbackQueryHandler(cancel_suggestion, pattern='^cancel_suggestion$'),
                CallbackQueryHandler(start, pattern='^main_menu$')
            ]
        },
        fallbacks=[
            CommandHandler("start", start),
            CallbackQueryHandler(start, pattern='^(back_to_main|main_menu)$')
        ]
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("get_chat_id", get_chat_id))
    application.add_handler(CommandHandler("check_bot_rights", check_bot_rights))
    application.add_handler(CommandHandler("check_webhook", check_webhook))
    application.add_handler(CommandHandler("delete_webhook", delete_webhook))

    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND,
        lambda update, context: None
    ))

    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == '__main__':
    main()
